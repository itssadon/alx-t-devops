# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3
# Orchestrate or schedule a set of jobs

commands:
  # Exercise: Reusable Job Code
  print_pipeline_id:
    parameters:
      id:
        type: string
    steps:
      - run: echo << parameters.id >>
  # Exercise - Rollback
  destroy_prometheus_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name prometheus-${CIRCLE_WORKFLOW_ID:0:5}
  destroy_node_exporter_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name prometheus-node-exporter-${CIRCLE_WORKFLOW_ID:0:5}

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Create prometheus instance
  create_prometheus_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create prometheus infrastructure
          command: |
            aws cloudformation deploy \
              --template-file prometheus-template.yml \
              --stack-name prometheus-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
      - destroy_prometheus_environment

  # Get prometheus instance IP
  get_prometheus_infrastructure_ip:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Get instance IP
          command: |
            echo "[all]" > prometheus-inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Purpose,Values=prometheus" \
              --output text >> prometheus-inventory.txt
      - run:
          name: Show IP
          command: |
            cat prometheus-inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .

  # Configure Prometheus
  configure_prometheus_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            apk add --no-cache tar gzip
      - run:
          name: Install AWS CLI
          command: |
            pip3 install --upgrade pip && pip3 install --no-cache-dir awscli
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints: ["5c:b0:d2:b6:07:d4:0a:9a:d0:d9:4e:9d:e0:5b:3f:82"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i ./prometheus-inventory.txt main.yml

  # Create node_exporter instance
  create_node_exporter_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create node exporter infrastructure
          command: |
            aws cloudformation deploy \
              --template-file prometheus-node-exporter-template.yml \
              --stack-name prometheus-node-exporter-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
      - destroy_node_exporter_environment

  # Get node exporter instance IP
  get_node_exporter_infrastructure_ip:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Get instance IP
          command: |
            echo "[all]" > prometheus-node-exporter-inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Purpose,Values=prometheus-node-exporter" \
              --output text >> prometheus-node-exporter-inventory.txt
      - run:
          name: Show IP
          command: |
            cat prometheus-node-exporter-inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .

  # Configure node exporter
  configure_node_exporter_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            apk add --no-cache tar gzip
      - run:
          name: Install AWS CLI
          command: |
            pip3 install --upgrade pip && pip3 install --no-cache-dir awscli
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints: ["5c:b0:d2:b6:07:d4:0a:9a:d0:d9:4e:9d:e0:5b:3f:82"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i ./prometheus-node-exporter-inventory.txt node-exporter.main.yml

  # prepare new promitheus configuration file
  prepare_prometheus_config:
    docker:
      - image: amazon/aws-cli
    steps:
      # - run:
      #     name: Install tar utility
      #     command: |
      #       yum install -y tar gzip
      - run:
          name: Get node_exporter instance DNS Name
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:Purpose,Values=prometheus-node-exporter" \
              --output text >> prometheus-node-exporter-dns.txt
      - run:
          name: Show DNS
          command: |
            cat prometheus-node-exporter-dns.txt
            PUBLIC_DNS_NAME=$( cat prometheus-node-exporter-dns.txt)
      - run:
          name: prepare new prometheus configuration
          command: |
            echo \
            "global:
              scrape_interval: 15s
              external_labels:
                monitor: "prometheus"

            scrape_configs:
              - job_name: "node_exporter"
                static_configs:
                  - targets: ["${PUBLIC_DNS_NAME}:9100"]" > new_prometheus.yml
      - run:
          name: Show new prometheus configuration
          command: |
            cat new_prometheus.yml
      - persist_to_workspace:
          root: .
          paths:
            - .

  # configure prometheus to start receiving metrics from the Node Exporter
  configure_prometheus_to_receive_metrics:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            apk add --no-cache tar gzip
      - run:
          name: Install AWS CLI
          command: |
            pip3 install --upgrade pip && pip3 install --no-cache-dir awscli
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints: ["5c:b0:d2:b6:07:d4:0a:9a:d0:d9:4e:9d:e0:5b:3f:82"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i ./prometheus-inventory.txt main.yml

  # Smoke Testing
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl aws-cli
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
      - destroy_environment

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  prometheus-setup:
    jobs:
      - create_prometheus_infrastructure
      - get_prometheus_infrastructure_ip:
          requires:
            - create_prometheus_infrastructure
      - configure_prometheus_infrastructure:
          requires:
            - get_prometheus_infrastructure_ip
      - create_node_exporter_infrastructure:
          requires:
            - create_prometheus_infrastructure
      - get_node_exporter_infrastructure_ip:
          requires:
            - create_node_exporter_infrastructure
      - configure_node_exporter_infrastructure:
          requires:
            - get_node_exporter_infrastructure_ip
      - prepare_prometheus_config:
          requires:
            - configure_node_exporter_infrastructure
      # - configure_prometheus_to_receive_metrics:
      #     requires:
      #       - create_prometheus_infrastructure
      #       - prepare_prometheus_config
      # - smoke_test:
      #     requires:
      #       - create_infrastructure
